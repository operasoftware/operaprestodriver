syntax = scope;

message ServiceList
{
    repeated string serviceList = 1;
}

/**
 * Introspection result for a given message.
 */
message MessageInfo
{
    message FieldInfo
    {
        required string name       = 1;
        /**
         * The protocol buffer type for this field. The types are:
         * 
         * == ============================
         * 1  Double
         * 2  Float
         * 3  Int32
         * 4  Uint32
         * 5  Sint32
         * 6  Fixed32
         * 7  Sfixed32
         * 8  Bool
         * 9  String
         * 10 Bytes
         * 11 Message
         * 12 Int64 (not supported yet)
         * 13 Uint64 (not supported yet)
         * 14 Sint64 (not supported yet)
         * 15 Fixed64 (not supported yet)
         * 16 Sfixed64 (not supported yet)
         * == ============================
         */
        required uint32 type       = 2;
        /**
         * The unique protocol buffer number for this field.
         */
        required uint32 number     = 3;
        /**
         * Specifies whether the fields is required, optional or repeated:
         * 
         * = ========
         * 0 Required
         * 1 Optional
         * 2 Repeated
         * = ========
         */
        optional uint32 quantifier = 4 [default = 0];
        /**
         * ID of message this field references, only set for Message fields
         */
        optional uint32 messageID  = 5;
    }

    required uint32    id        = 1;
    required string    name      = 2;
    repeated FieldInfo fieldList = 3;
    optional uint32    parentID  = 4;
}

message EventInfo
{
    required string name      = 1;
    required uint32 number    = 2;
    required uint32 messageID = 3;
}

message Service
{
    required string name          = 1;
    /**
     * This field contains the major and minor version number of the service.
     * The first number is the major version, the second is the minor, and any additional
     * numbers/strings are not of relevance but can be shown to the end-user if wanted.
     *
     * The major version determines major changes (ie. compatibility breaks), while
     * the minor version determines incremental changes (ie. backwards compatible).
     * The client must check these two numbers to ensure it is able to communicate
     * properly with the service. If the major version is different from the
     * versions the client is compatible with, or the minor version is less than
     * the required version, it must disconnect.
     *
     * Let us say a client supports version 1.6 and up and also version 2.0 and up.
     * It would do::
     *
     *   if major == 1 and minor >= 6 or major == 2:
     *     print "We support service version %d.%d" % (major, minor)
     *   else:
     *     print "We do not support service version %d.%d" % (major, minor)
     */
    required string version       = 2;
}

message HostInfo
{
    required uint32  stpVersion      = 1;
    required string  coreVersion     = 2;
    required string  platform        = 3;
    required string  operatingSystem = 4;
    required string  userAgent       = 5;
    repeated Service serviceList     = 6;
}

message ClientInfo
{
    required string format = 1;
}

message MessageInfoList
{
    repeated MessageInfo messageList = 1;
}

message ServiceSelection
{
    required string name = 1;
}

message ServiceInfo
{
    repeated CommandInfo commandList = 1;
    repeated EventInfo   eventList   = 2;
}

/**
 * This is a special service which is always present and always enabled.
 *
 * This service replaces the special commands used in STP/0 (started with an asterix).
 * The only command that is fully compatible with STP/0 is "\*services" (OnServices)
 * which is actually sent as STP/0 only, any other special command sent to scope
 * will be ignored.
 * The system takes care of mapping it to the correct format when sending and
 * receiving them. However the payload of these messages is no longer the same:
 * they must now be sent using UMS. This means using either JSON or XML when
 * sending over STP/0.
 */
service Scope
{
    option (cpp_hfile) = "modules/scope/src/scope_protocol_service.h";
    option (version) = "1.0";
    option (cpp_class) = OpScopeProtocolService;
 
    /**
     * This commands is used by the client to initiate connection with the host.
     * The command specifies the global settings for the client. Currently this
     * means setting the format of all events for this client.
     *
     * Repeated use of this command will result in the host resetting any settings
     * and services that the client used earlier.
     *
     * If the requested format is not allowed or does not exist, it will respond
     * with the status `"Bad Request"` (3).
     */
    command Connect(ClientInfo) returns (Default) = 3;
    /**
     * This disconnects the client by resetting any settings and disabling any services
     * the client used. This command is primarily meant for proxies which must be
     * sent if a socket connection with an active client closes.
     * If the client is able to do this, then it should send the command itself.
     */
    command Disconnect(Default) returns (Default) = 4;
    /**
     * This is used to enable a single service in the host.
     *
     * Errors:
     *
     * - If the service is not found it will return with status
     *   `"Service Not Found"` (6).
     * - If the service could not be enabled it will return with status
     *   `"Service Not Enabled"` (8).
     * - If the client tries to enable the `"scope"` service it will return with status
     *   `"Bad Request"` (3).
     */
    command Enable(ServiceSelection) returns (ServiceResult) = 5;
    /**
     * This is used to disable a client's access to one service.
     * Once the client has been removed the from the service it will no longer
     * receive events from it, and it will not be able to send commands to it.
     * The internal `"scope"` service cannot be disabled since it is always enabled.
     *
     * Errors:
     *
     * - If the service is not found it will return with a status of
     *   `"Service Not Found"` (6).
     * - If the service is not yet enabled it will return with a status of
     *   `"Service Not Enabled"` (8).
     * - If the client tries to disable the "scope" service it will return with a
     *   status of `"Bad Request"` (3).
     */
    command Disable(ServiceSelection) returns (ServiceResult) = 6;
    /**
     * This is used to get information about one specific service.
     *
     * The command list contains all the commands in the service. Each command is
     * listed with its name and the corresponding command ID (used by STP/1).
     * The event list is similar to the command list, but is listed for the available
     * events.
     *
     * Errors:
     *
     * - If the service is not found it will return the message with status set
     *   to `"Service Not Found"` (6).
     */
    command Info(ServiceSelection) returns (ServiceInfo) = 7;
    /**
     * The quit message is sent to Opera when the proxy or client operation is terminated.
     * No communication with the proxy will be possible once it has sent the quit
     * message. When Opera receives this message it should disable all debugging
     * services that are currently enabled. 
     *
     * Note: This command does not do anything, might be removed in the future.
     */
    command Quit(Default) returns (Default) = 8;
    /**
     * This commands is used to get information about the host.
     *
     * The command responds with information on available services, version, and
     * other relevant information.
     */
    command HostInfo(Default) returns (HostInfo) = 10;
    command MessageInfo(MessageSelection) returns (MessageInfoList) = 11;
    /**
     * This event is the first that is sent from the host (and proxy) and contains
     * all the available services. It is always sent encoded as an STP/0 message.
     */
    event OnServices returns (ServiceList) = 0;
    /**
     * This event is sent by Opera to the proxy or client when Opera terminates its
     * operation. No communication with Opera is possible once Opera has sent the
     * event. When the proxy receives this message it broadcasts it to all of its
     * clients.
     */
    event OnQuit returns (Default) = 1;
    /**
     * This is a special event which is used by the proxy (and not by the host) when the connection
     * to the Opera host is unexpectedly lost, for instance if the Opera host crashes.
     */
    event OnConnectionLost returns (Default) = 2;
    /**
     * This is a generic event for sending out error messages which are not tied to a specific
     * command.
     */
    event OnError returns (ErrorInfo) = 9;
}

message ErrorInfo
{
    required string description = 1;
}

/**
 * Selects which messages to introspect.
 */
message MessageSelection
{
    /**
     * Name of service to fetch messages from. Message ids are unique per service.
     */
    required string serviceName    = 1;
    /**
     * Contains ids of message which should be fetched.
     */
    repeated uint32 idList         = 2;
    /**
     * Set to true to automatically include messages which are referenced (fields of type Message). This makes it easy to fetch the entire message chain for a given message.
     */
    optional bool   includeRelated = 3;
    /**
     * Set to true if all message in the service should be included. Overrides includeRelated and idList.
     */
    optional bool   includeAll     = 4;
}

message ServiceResult
{
    required string name = 1;
}

message CommandInfo
{
    required string name       = 1;
    required uint32 number     = 2;
    required uint32 messageID  = 3;
    required uint32 responseID = 4;
}

