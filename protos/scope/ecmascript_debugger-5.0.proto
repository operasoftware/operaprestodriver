syntax = scope;

message CssStylesheetList
{
    message Stylesheet
    {
        required uint32 objectID           = 1;
        required bool   isDisabled         = 2;
        required string href               = 3;
        required string title              = 4;
        required string type               = 5;
        repeated string mediaList          = 6;
        optional uint32 ownerNodeID        = 7;
        optional uint32 ownerRuleID        = 8;
        optional uint32 parentStylesheetID = 9;
    }

    repeated Stylesheet stylesheetList = 1;
}

message ExamineList
{
    required uint32 runtimeID  = 1;
    repeated uint32 objectList = 2;
}

message BreakpointID
{
    /**
     * See BreakpointPosition.breakpointID.
     */
    required uint32 breakpointID = 1;
}

message BacktraceSelection
{
    required uint32 runtimeID = 1;
    required uint32 threadID  = 2;
    /**
     * If omitted (or 0) all frames are returned.
     */
    optional uint32 maxFrames = 3 [default = 0];
}

/**
 * The drawing order is box, reference-box-frame, box-frame, grid.
 */
message SpotlightObject
{
    /**
     * Colors are encoded as RGBA with 8 bits for each channel.
     * encoded_color = ( red << 24 ) + ( green << 16 ) + ( blue << 8 ) + ( alpha ) 
     * with red, green, blue and alpha in a range of 0 - 255
     * e.g.:
     * 
     *     red     4278190335
     *     green     16711935
     *     blue         65535
     *     yellow  4294902015
     *     cyan      16777215
     *     magenta 4278255615
     */
    message SpotlightBox
    {
        /**
         * Valid values:
         *   0: dimension
         *   1: padding
         *   2: border
         *   3: margin
         */
        required uint32 boxType    = 1;
        optional uint32 fillColor  = 2;
        /**
         * Drawn with 1px width inside the box
         */
        optional uint32 frameColor = 3;
        /**
         * Drawn with 1px width inside the box over the whole document
         */
        optional uint32 gridColor  = 4;
    }

    required uint32       objectID       = 1;
    /**
     * Chooses whether the given object should be scrolled into view or not.
     */
    required bool         scrollIntoView = 2;
    repeated SpotlightBox boxList        = 3;
}

message RuntimeInfo
{
    required uint32 runtimeID     = 1;
    required string htmlFramePath = 2;
    /**
     * the ID of the window
     */
    required uint32 windowID      = 3;
    /**
     * the 'global' object
     */
    required uint32 objectID      = 4;
    /**
     * the document's URI
     */
    required string uri           = 5;
}

message NodeInfo
{
    message Attribute
    {
        required string namePrefix = 1;
        required string name       = 2;
        required string value      = 3;
    }

    required uint32    objectID        =  1;
    required uint32    type            =  2;
    required string    name            =  3;
    required uint32    depth           =  4;
    /**
     * Used if type is 1.
     */
    optional string    namespacePrefix =  5;
    /**
     * Used if type is 1.
     */
    repeated Attribute attributeList   =  6;
    /**
     * Used if type is 1.
     */
    optional uint32    childrenLength  =  7;
    /**
     * Used if type is 3, 4, 7 or 8.
     */
    optional string    value           =  8;
    /**
     * Used if type is 10.
     */
    optional string    publicID        =  9;
    /**
     * Used if type is 10.
     */
    optional string    systemID        = 10;
}

message EventHandlerID
{
    /**
     * `handlerID` as specified in EventHandler.handlerID.
     */
    required uint32 handlerID = 1;
}

message ThreadInfo
{
    required uint32 runtimeID      = 1;
    required uint32 threadID       = 2;
    required uint32 parentThreadID = 3;
    /**
     * One of:
     * - `"inline"`
     * - `"event"`
     * - `"linked"`
     * - `"timeout"`
     * - `"java"`
     * - `"unknown"`
     */
    required string threadType     = 4;
    /**
     * present if `threadType` is `"event"`
     */
    optional string eventNamespace = 5;
    /**
     * present if `threadType` is `"event"`
     */
    optional string eventType      = 6;
}

message BacktraceFrame
{
    required uint32      functionID     = 1;
    required uint32      argumentObject = 2;
    required uint32      variableObject = 3;
    required uint32      thisObject     = 4;
    /**
     * TODO: Spec says repeated, while the code only assumes one (optional)
     */
    optional ObjectValue objectValue    = 5;
    optional uint32      scriptID       = 6;
    optional uint32      lineNumber     = 7;
}

message RuntimeID
{
    required uint32 runtimeID = 1;
}

message RuntimeSelection
{
    /**
     * List the ones you want to see, or none if you want all (also set `allRuntimes`).
     */
    repeated uint32 runtimeList = 1;
    /**
     * Create runtimes for all documents. Runtimes are normally not created for documents
     * without ECMAScript.
     */
    optional bool   allRuntimes = 2;
}

message ObjectInfo
{
    /**
     * If `type` is ... then ... is present:
     *   "object", `objectValue`
     *   "number", `value`
     *   "string", `value`
     *   "boolean", `value` (`"true"` or `"false"`)
     * Otherwise (`"undefined"` or `"null"`), only `type` is present.
     */
    message Property
    {
        required string      name        = 1;
        /**
         * One of:
         * - `"number"`
         * - `"boolean"`
         * - `"string"`
         * - `"null"`
         * - `"undefined"`
         * - `"object"`
         */
        required string      type        = 2;
        /**
         * Only present for `"number"`, `"string"` or `"boolean"`
         */
        optional string      value       = 3;
        /**
         * Only present for `"object"`
         */
        optional ObjectValue objectValue = 4;
    }

    required ObjectValue value        = 1;
    repeated Property    propertyList = 2;
}

message CssElementSelection
{
    required uint32 runtimeID = 1;
    required uint32 objectID  = 2;
}

message DomEvent
{
    /**
     * Refers to the target of the event.
     */
    required uint32 objectID  = 1;
    required uint32 handlerID = 2;
    /**
     * The event type is e.g., `"click"`, `"mousemove"`
     * More examples are at http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html
     * Exactly which events are implemented depends on the host, and is not defined in this protocol.
     */
    required string eventType = 3;
}

message ThreadResult
{
    required uint32 runtimeID = 1;
    required uint32 threadID  = 2;
    /**
     * One of:
     * - `"completed"`
     * - `"unhandled-exception"`
     * - `"aborted"`
     * - `"cancelled-by-scheduler"`
     */
    required string status    = 3;
}

/**
 * Frames are in innermost-first order.
 */
message BacktraceFrameList
{
    repeated BacktraceFrame frameList = 1;
}

message NodeList
{
    repeated NodeInfo nodeList = 1;
}

message FrameSelection
{
    required uint32 runtimeID = 1;
    required uint32 threadID  = 2;
    required uint32 frameID   = 3;
}


/**
 *
 * Central data types and how they work:
 *
 * A "runtime" represents a document context in which threads execute.
 * There is a one-to-one mapping between runtimes and HTML documents.
 *
 * A "thread" represents a thread of execution in a runtime.  A "parent"
 * thread can be preempted by another "child" thread in order to respond
 * to a priority event; the parent thread will not run again until the
 * child thread has finished.
 *
 * A "script" is a pair (id, source code) where the id is globally
 * unique and the source code is Unicode text.
 *
 * An "object" is represented by a globally unique ID that is assigned by
 * the debugger.
 *
 * Globally unique means unique within a running Opera session; that is
 * from starting Opera to stopping it.
 *
 * The windowID is shared across scope. Notably, it's the same as in the console logger and window manager
 * INTERNAL: The value is from Window::id
 */ 
service EcmascriptDebugger
{
    option (cpp_hfile) = "modules/scope/src/scope_ecmascript_debugger.h";
    option (version) = "5.0";
    option (cpp_class) = ES_ScopeDebugFrontend;
 
    command ListRuntimes(RuntimeSelection) returns (RuntimeList) = 1;
    command ContinueThread(ThreadMode) returns (Default) = 2;
    command Eval(EvalData) returns (EvalResult) = 3 {
        option (cpp_response) = deferred;

    };
    command ExamineObjects(ExamineList) returns (ObjectList) = 4;
    command SpotlightObject(SpotlightObjectSelection) returns (Default) = 5;
    command AddBreakpoint(BreakpointPosition) returns (Default) = 6;
    command RemoveBreakpoint(BreakpointID) returns (Default) = 7;
    /**
     * Add an event handler. This will generate a OnHandleEvent event every time the XML event defined
     * by the pair (`namespace`, `eventType`) reaches the object defined by `objectID` in the capturing
     * phase. XML events are defined in http://www.w3.org/TR/xml-events
     */
    command AddEventHandler(EventHandler) returns (Default) = 8;
    command RemoveEventHandler(EventHandlerID) returns (Default) = 9;
    command SetConfiguration(Configuration) returns (Default) = 10;
    command GetBacktrace(BacktraceSelection) returns (BacktraceFrameList) = 11;
    command Break(BreakSelection) returns (Default) = 12;
    command InspectDom(DomTraversal) returns (NodeList) = 13;
    command CssGetIndexMap(Default) returns (CssIndexMap) = 22;
    command CssGetAllStylesheets(RuntimeID) returns (CssStylesheetList) = 23;
    command CssGetStylesheet(CssStylesheetSelection) returns (CssStylesheetRules) = 24;
    command CssGetStyleDeclarations(CssElementSelection) returns (CssStyleDeclarations) = 25;
    command GetSelectedObject(Default) returns (ObjectSelection) = 26;
    command SpotlightObjects(SpotlightSelection) returns (Default) = 27;
    /**
     * Release all objects (that is, object received through this protocol as objectIDs), so they can be garbage collected by the ecmascript engine. Note that garbage collection is not necessarily run at this point, so the memory for the given objects might not be freed immediately. IMPORTANT: After this call, no object IDs received earlier are valid! All objects needs to be requested again.
     */
    command ReleaseObjects(Default) returns (Default) = 29;
    event OnRuntimeStarted returns (RuntimeInfo) = 14;
    event OnRuntimeStopped returns (RuntimeID) = 15;
    event OnNewScript returns (ScriptInfo) = 16;
    event OnThreadStarted returns (ThreadInfo) = 17;
    event OnThreadFinished returns (ThreadResult) = 18;
    event OnThreadStoppedAt returns (ThreadStopInfo) = 19;
    /**
     * This event is issued for XML events on the host, if a corresponding
     * `AddEventHandler` has been issued earlier by the client.
     */
    event OnHandleEvent returns (DomEvent) = 20;
    /**
     * Some hosts send this event to indicate that an object was selected for
     * debugging, e.g., if the debugger was started by right-clicking an element
     * and clicking "inspect" in the context menu, this event will be sent
     * right after startup. A client may safely choose to ignore this event.
     */
    event OnObjectSelected returns (ObjectSelection) = 21;
    event OnParseError returns (DomParseError) = 28;
}

message DomParseError
{
    required uint32 runtimeID   = 1;
    required uint32 scriptID    = 2;
    required uint32 lineNumber  = 3;
    /**
     * Represents the character offset in the script where the parse error occured.
     */
    required uint32 offset      = 4;
    /**
     * Describes in what context the error occured.
     */
    required string context     = 5;
    /**
     * Contains the human-readable description of the parse error.
     */
    required string description = 6;
}

message Configuration
{
    optional bool stopAtScript            = 1 [default = true];
    optional bool stopAtException         = 2 [default = false];
    optional bool stopAtError             = 3 [default = false];
    optional bool stopAtAbort             = 4 [default = false];
    optional bool stopAtGc                = 5 [default = false];
    optional bool stopAtDebuggerStatement = 6 [default = false];
}

message BreakpointPosition
{
    /**
	 * A nonzero ID chosen by the client.
	 */
    required uint32 breakpointID = 1;
    /**
     * "line", "function", "event"
     */
    required string type         = 2;
    /**
     * Present when `type` is `"line"`
     */
    optional uint32 scriptID     = 3;
    /**
     * Present when `type` is `"line"`
     */
    optional uint32 lineNumber   = 4;
    /**
     * Present when `type` is `"event"`
     */
    optional string eventType    = 5;
}

message CssStyleDeclarations
{
    message NodeStyle
    {
        /**
         * Common to all origins:
         * - indexList
         * - valueList
         * - priorityList
         * - statusList
         *
         * Common to AUTHOR and LOCAL
         * - selector
         * - specificity
         *
         * For AUTHOR
         * - stylesheetID
         * - ruleID
         * - ruleType
         */
        message StyleDeclaration
        {
            /**
             * 1 = USER-AGENT, 2=LOCAL, 3=AUTHOR, 4=ELEMENT
             */
            required uint32 origin       =  1;
            repeated uint32 indexList    =  2;
            repeated string valueList    =  3;
            repeated bool   priorityList =  4;
            repeated uint32 statusList   =  5;
            optional string selector     =  6;
            optional uint32 specificity  =  7;
            optional uint32 stylesheetID =  8;
            optional uint32 ruleID       =  9;
            optional uint32 ruleType     = 10;
        }
    
        required uint32           objectID    = 1;
        required string           elementName = 2;
        repeated StyleDeclaration styleList   = 3;
    }

    repeated string    computedStyleList = 1;
    repeated NodeStyle nodeStyleList     = 2;
}

message CssIndexMap
{
    repeated string nameList = 1;
}

message ThreadStopInfo
{
    required uint32 runtimeID     = 1;
    required uint32 threadID      = 2;
    required uint32 scriptID      = 3;
    required uint32 lineNumber    = 4;
    /**
     * One of:
     * - `"broken"`
     * - `"function-return"`
     * - `"exception"`
     * - `"debugger statement"`
     * - `"breakpoint"`
     * - `"unknown"`
     *
     * `"broken"` is sent in response to a `Break` command.
     * `"breakpoint"` is sent when the script hits a debugger-set breakpoint.
     */
    required string stoppedReason = 5;
    /**
     * Present if and only if `stoppedReason` is `"breakpoint"`
     */
    optional uint32 breakpointID  = 6;
}

message ObjectSelection
{
    required uint32 objectID  = 1;
    required uint32 windowID  = 2;
    optional uint32 runtimeID = 3;
}

message ScriptInfo
{
    required uint32 runtimeID  = 1;
    required uint32 scriptID   = 2;
    /**
     * One of:
     * - `"inline"`
     * - `"event"`
     * - `"linked"`
     * - `"timeout"`
     * - `"java"`
     * - `"generated"`
     * - `"unknown"`
     */
    required string scriptType = 3;
    required string scriptData = 4;
    /**
     * present if `scriptType` is Linked
     */
    optional string uri        = 5;
}

message ThreadMode
{
    required uint32 runtimeID = 1;
    required uint32 threadID  = 2;
    /**
     * One of:
     * - `"run"`
     * - `"step-into-call"`
     * - `"step-next-line"`
     * - `"step-out-of-call"`
     */
    required string mode      = 3;
}

message ObjectList
{
    repeated ObjectInfo objectList = 1;
}

/**
 * Add an event handler. This will generate a HANDLE-EVENT event every time the XML event defined by the pair (NAMESPACE, EVENT-TYPE) reaches the object defined by OBJECT-ID in the capturing phase. XML events are defined in http://www.w3.org/TR/xml-events
 */
message EventHandler
{
    /**
     * A nonzero ID chosen by the client. The host may also use this ID to refer to the
	 * event handler.
     */
    required uint32 handlerID             = 1;
    required uint32 objectID              = 2;
    /**
     * Namespace of the event. If empty, it will match any namespace.
     */
    required string namespace             = 3;
    required string eventType             = 4;
    /**
     * If `true` it prevents the default event handler from running.
     */
    required bool   preventDefaultHandler = 5;
    /**
     * If `true` it stops propagation of the event beyond this `objectID` (it will however run for all handlers on the object).
     */
    required bool   stopPropagation       = 6;
}

message EvalResult
{
    /**
     * If it is "completed" or "unhandled-exception" then `type`, `value` and `objectValue` will be present.
     */
    required string      status      = 1;
    /**
     * One of:
     * - `"number"`
     * - `"boolean"`
     * - `"string"`
     * - `"null"`
     * - `"undefined"`
     * - `"object"`
     */
    required string      type        = 2;
    /**
     * Only present when `type` is `"number"`, `"string"` or `"boolean"`
     */
    optional string      value       = 3;
    /**
     * Only present when `type` is `"object"`
     */
    optional ObjectValue objectValue = 4;
}

message ObjectValue
{
    required uint32 objectID    = 1;
    required bool   isCallable  = 2;
    required bool   isFunction  = 3;
    /**
     * type, function or object
     */
    required string type        = 4;
    optional uint32 prototypeID = 5;
    /**
     * Name of class (object) or function
     */
    optional string name        = 6;
}

message RuntimeList
{
    repeated RuntimeInfo runtimeList = 1;
}

message SpotlightObjectSelection
{
    /**
     * Using `0` clears the spotlight.
     */
    required uint32 objectID       = 1;
    /**
     * Chooses whether the given object should be scrolled into view or not.
     */
    required bool   scrollIntoView = 2;
}

message DomTraversal
{
    required uint32 objectID  = 1;
    /**
     * traversal on off:  
     * - `"parent-node-chain-with-children"`
     *     take the parent node chain for the target node.
     *     add for each node in that chain all children, 
     *     and for all children there first child,
     *     if that is a text node and the only node, 
     *     starting with the document node.
     * - `"children"`
     *     get node data for all children in their flow
     * - `"node"
     *     get node data for that node
     * - `"subtree"`
     *     get node data for the subtree in the flow of it
     */
    required string traversal = 2;
}

message BreakSelection
{
    required uint32 runtimeID = 1;
    required uint32 threadID  = 2;
}

/**
 * To highlight elements in the document
 */
message SpotlightSelection
{
    repeated SpotlightObject spotlightObjectList = 1;
}

message CssStylesheetRules
{
    /**
     * Common to FONT_FACE, PAGE and STYLE is:
     * - indexList
     * - valueList
     * - priorityList
     *
     * Common to STYLE and PAGE is:
     * - selectorList
     * - specificityList
     *
     * Common to MEDIA and IMPORT
     * - mediaList
     *
     * For MEDIA
     * - ruleList
     *
     * For IMPORT
     * - href
     * - importStylesheetID
     *
     * For PAGE
     * - pseudoClass
     *
     * For CHARSET
     * - charset
     */
    message StylesheetRule
    {
        /**
         * Type values:
         * 0 - UNKNOWN
         * 1 - STYLE
         * 2 - CHARSET
         * 3 - IMPORT
         * 4 - MEDIA
         * 5 - FONT_FACE
         * 6 - PAGE
         * 7 - NAMESPACE // Not supported
         */
        required uint32         type               =  1;
        required uint32         stylesheetID       =  2;
        required uint32         ruleID             =  3;
        repeated uint32         indexList          =  4;
        repeated string         valueList          =  5;
        repeated bool           priorityList       =  6;
        /**
         * 0..1 for PAGE and 0..* for STYLE
         */
        repeated string         selectorList       =  7;
        /**
         * 1..1 for PAGE and 0..* for STYLE
         */
        repeated uint32         specificityList    =  8;
        repeated string         mediaList          =  9;
        repeated StylesheetRule ruleList           = 10;
        optional string         href               = 11;
        optional uint32         importStylesheetID = 12;
        optional uint32         pseudoClass        = 13;
        optional string         charset            = 14;
    }

    repeated StylesheetRule ruleList = 1;
}

message EvalData
{
    message Variable
    {
        required string name     = 1;
        required uint32 objectID = 2;
    }

    required uint32   runtimeID    = 1;
    /**
     * The ID of the thread to use for executing the script data, or 0
     * to use the global scope.
     */
    required uint32   threadID     = 2;
    required uint32   frameIndex   = 3;
    /**
     * Represents a script to be executed.
     */
    required string   scriptData   = 4;
    /**
     * Represent variables to set.
     */
    repeated Variable variableList = 5;
}

message CssStylesheetSelection
{
    required uint32 runtimeID    = 1;
    required uint32 stylesheetID = 2;
}

