syntax = scope;


/**
 * Desktop Window Information
 */
message DesktopWindowInfo
{
    required uint32 windowID   				= 1;
    required string title      				= 2;
	/** 
	 * Name of the window (e.g. "Account Subscription Dialog")
	 * from dialog ini or quick-widget-names.h
	*/
    required string name	   				= 3;
    /**
     *
     * Type of the window. (Only add types as we need them)
     *
     */
	enum DesktopWindowType {
		UNKNOWN = 0;
		DIALOG 	= 1;
		NORMAL 	= 2;
	}
    required DesktopWindowType windowType 	= 4;
    
    /**
     *
     * Set if the window is entirely on the screen
     *
     */
    required bool onScreen					= 5;

    /**
     *
     * State of the window (matching the enum in Opera at the time of creation)
     *
     */
	enum DesktopWindowState {
		RESTORED 	= 0;
		MINIMIZED 	= 1;
		MAXIMIZED 	= 2;
		FULLSCREEN 	= 3;
	}
	required DesktopWindowState state		= 6;

    required DesktopWindowRect rect 		= 7;

    required bool active = 8;
}

message DesktopWindowRect
{
	required uint32 x      = 1;
	required uint32 y      = 2;
	required uint32 width  = 3;
	required uint32 height = 4;
}

message QuickMenuID
{
    required string menuName = 1;
}


message QuickMenuList
{
	repeated QuickMenuInfo menuList = 1;
}

message QuickMenuInfo
{
	required QuickMenuID menuId = 1;
	required DesktopWindowRect rect = 2;
	required DesktopWindowID windowId = 3; // for menubars
	repeated QuickMenuItemInfo menuItemList = 4; 
}

message QuickMenuItemID
{
    required string menuText = 1; // This is used because of MenuItemPressed. Text doesn't really  identify uniquely an item
    optional bool popupMenu = 2; 	  // Set when this is a pop-menu used for drop downs (e.g. on Mac Drop Downs) 
}

message QuickMenuItemInfo 
{
	required string text = 1;
	optional string action = 2;
	optional string submenu = 3; /*an item will either be a submenu item or have an associated action*/
	optional string actionParam = 4;	

	required uint32 row    = 5;
	optional string shortcutLetter = 6;
	optional string shortcut = 7;

	required DesktopWindowRect rect = 8;

	required bool enabled = 9;
	required bool checked = 10; 
	required bool bold = 11;
	required bool separator = 12; // Means almost everything else should be optional ??
}

message QuickWidgetInfo
{
   /**
    * Name of the widget (e.g. "label_for_x")
    *
    */
    required string name    		= 1;
    /**
    * TODO: Add the type names
    *
    */
	enum QuickWidgetType {
		UNKNOWN 	= 0;
		BUTTON 		= 1;
		CHECKBOX 	= 2;
		DIALOGTAB 	= 3;
		DROPDOWN	= 4;
		DROPDOWNITEM    = 5;
		EDITFIELD 	= 6;
		LABEL 		= 7;
		RADIOBUTTON     = 8;
		ADDRESSFIELD    = 9;
		SEARCH          = 10;
		TOOLBAR         = 11;
		TREEVIEW        = 12;
		TREEITEM        = 13;
		TABBUTTON       = 14;
		THUMBNAIL       = 15;
		GRIDLAYOUT      = 16;
		GRIDITEM        = 17;
		QUICKFIND       = 18;
	}
    required QuickWidgetType type 	= 2;
    required bool visible	    	= 3;
    required string text        	= 4;
    /**
    * value depends on the widget type
	*   e.g. for checkboxes value = checked (1) or unchecked (0)
    */
    required uint32 value       	= 5;
    required bool enabled       	= 6;
    /**
    * Set on buttons when they are the default on a dialog/window
    */
    required bool defaultLook  		= 7;
    /**
    * Set when a widget has a forced focused look (e.g. speed dials)
    */
    required bool focusedLook   	= 8;
    required DesktopWindowRect rect = 9;

    /**
    * Name, text or other field to specify of the parent widget, used in treeviews, toolbars etc.
    */
    optional string parent          = 10;
    /**
     * Row and column position of this item inside the parent widget
     */
    optional uint32 row               = 11;
    optional uint32 col               = 12;

    /**
     * Text fields for additional text (e.g. for the address field)
     */
     optional string visible_text     = 13;
     optional string additional_text  = 14;
}

/**
 */
service DesktopWindowManager
{
    option (cpp_hfile) = "adjunct/desktop_scope/scope_desktop_window_manager.h";
    option (core_release) = "2.5";
    option (version) = "2.3";
    option (cpp_class) = OpScopeDesktopWindowManager;

    /**
     * Request the currently active window.
     */
    command GetActiveWindow(Default) returns (DesktopWindowID) = 1;

    /**
     * List all the desktop windows
     */
    command ListWindows(Default) returns (DesktopWindowList) = 2;

    /**
     * List all the widgets in the window
     */
    command ListQuickWidgets(DesktopWindowID) returns (QuickWidgetInfoList) = 3;

    /**
     * Gets a quick widget based on the search criteria
     */
    command GetQuickWidget(QuickWidgetSearch) returns (QuickWidgetInfo) = 4;

    /**
     * Sent when a window has completed showing
     */
    event OnWindowShown returns (DesktopWindowInfo) = 5;
    /**
     * Sent every time there is a new window, or some window information changed.
     */
    event OnWindowUpdated returns (DesktopWindowInfo) = 6;
    /**
     * Sent when a window is closed.
     */
    event OnWindowClosed returns (DesktopWindowInfo) = 7;
    /**
     * Sent whenever the active window is changed.
     */
    event OnWindowActivated returns (DesktopWindowInfo) = 8;
    /**
     * Sent whenever the webpage is finished loading in the window
     */
    event OnWindowPageLoaded returns (DesktopWindowInfo) = 9;

    /* --- Menu stuff --- */
    command ListQuickMenus(Default) returns(QuickMenuList) = 10;

    event OnMenuShown returns (QuickMenuInfo) = 11;
    event OnMenuClosed returns (QuickMenuID) = 12;

    /* Used if platform doesn't support getting coordinates for menu items */
    command PressQuickMenuItem(QuickMenuItemID) returns (Default) = 13;
    /** 
     *  Sent when menu item is pressed if the platform doesn't support 
     *	getting coordinates of menu items
     **/
    event OnMenuItemPressed returns (QuickMenuItemID) = 14;
}

message DesktopWindowID
{
    required uint32 windowID = 1;
}

message DesktopWindowList
{
    repeated DesktopWindowInfo windowList = 1;
}

message QuickWidgetInfoList
{
    repeated QuickWidgetInfo quickwidgetList = 1;
}

/* Note: this isn't really neccessary as currently for search,
   all widgets are sent to OperaDriver and search is performed there */
message QuickWidgetSearch
{
	required DesktopWindowID windowID = 1;

	enum QuickWidgetSearchType {
	    NAME = 0;
	    TEXT = 1;
	    POS  = 2;
	}

	required QuickWidgetSearchType searchType = 2;
	/**
	* Is the name of a widget (i.e. "label_for_x")
	*/
	required string data = 3;
}



